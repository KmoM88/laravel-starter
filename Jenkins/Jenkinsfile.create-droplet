pipeline {
    agent any
    environment {
        DOCTL_TOKEN = credentials('DO-token')
        SSH_KEY = credentials('do-ssh-key')
        DROPLET_NAME = "laravel-deploy"
        SSH_KEY_NAME = "JenkisDeploy"
        REGION = "nyc3"
        IMAGE = "ubuntu-22-04-x64"
        SIZE = "s-1vcpu-1gb"
        SSH_USER = "root"
    }
    stages {
        stage('Crear Droplet') {
            steps {
                script {
                    sh "doctl auth init -t ${DOCTL_TOKEN_PSW}"
                    def exists = sh(
                        script: "doctl compute droplet list --format Name --no-header | grep -w ${DROPLET_NAME} || true",
                        returnStdout: true
                    ).trim()

                    if (exists) {
                        echo "Droplet '${DROPLET_NAME}' already exists. Skipping creation."
                    } else {
                        def keyId = sh(
                            script: "doctl compute ssh-key list --output json | jq -r '.[] | select(.name==\"${SSH_KEY_NAME}\") | .id'",
                            returnStdout: true
                        ).trim()

                        if (!keyId) {
                            error "SSH Key '${SSH_KEY_NAME}' not found in DigitalOcean."
                        }

                        sh """
                            doctl compute droplet create ${DROPLET_NAME} \\
                                --region ${REGION} \\
                                --image ${IMAGE} \\
                                --size ${SIZE} \\
                                --ssh-keys ${keyId} \\
                                --wait
                        """
                        echo "Droplet '${DROPLET_NAME}' created successfully."
                    }
                }
            }
        }

        stage('Esperar a que el droplet esté disponible') {
            steps {
                script {
                    def dropletIP = sh(
                        script: "doctl compute droplet list ${DROPLET_NAME} --format PublicIPv4 --no-header",
                        returnStdout: true
                    ).trim()
                    env.DROPLET_IP = dropletIP

                    echo "Esperando a que ${dropletIP} acepte conexiones SSH..."
                    def maxRetries = 30
                    def waitSec = 10
                    def reachable = false

                    for (int i = 1; i <= maxRetries; i++) {
                        try {
                            sh "ssh -i ${SSH_KEY} -o BatchMode=yes -o ConnectTimeout=5 -o StrictHostKeyChecking=no ${SSH_USER}@${dropletIP} 'echo OK'"
                            reachable = true
                            echo "Droplet disponible después de ${i} intentos."
                            break
                        } catch (err) {
                            echo "Intento ${i}: droplet no disponible aún. Esperando ${waitSec} segundos..."
                            sleep waitSec
                        }
                    }
                    if (!reachable) {
                        error("No se pudo conectar al droplet después de ${maxRetries} intentos.")
                    }
                }
            }
        }

        stage('Instalar Docker') {
            steps {
                script {
					def dropletIP = env.DROPLET_IP

					echo "Instalando Docker en ${dropletIP}..."
					def installDockerCmd = """
					apt-get update
					apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
					curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor --batch -o /usr/share/keyrings/docker-archive-keyring.gpg
					""".stripIndent()

					sh "ssh -i ${SSH_KEY} -o StrictHostKeyChecking=no ${SSH_USER}@${dropletIP} '${installDockerCmd}'"
				}
            }
        }
    }
}
