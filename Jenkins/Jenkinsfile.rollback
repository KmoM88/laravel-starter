pipeline {
    agent any
    environment {
        REGISTRY = "registry.digitalocean.com/tierone"
        CONTAINER_NAME = "laravel-app"
        IMAGE_NAME = "laravel-prod"
        SSH_USER = "root"
		REGISTRY_CREDS = credentials('DO-token')
        SSH_KEY = credentials('do-ssh-key')
        APP_KEY = credentials('APP_KEY')
    }
    stages {
        stage('Login doctl') {
            steps {
                sh 'doctl auth init -t $REGISTRY_CREDS_PSW'
            }
        }
		stage('Get Droplet IP') {
			steps {
				script {
					env.DROPLET_HOST = sh(
						script: "doctl compute droplet list laravel-deploy --format PublicIPv4 --no-header",
						returnStdout: true
					).trim()
					echo "Droplet IP: ${env.DROPLET_HOST}"
				}
			}
		}
        stage('Obtener tag actual en el droplet') {
			steps {
				script {
					def cmd = """
						ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@$env.DROPLET_HOST \\
						"docker inspect --format='{{.Config.Image}}' $CONTAINER_NAME | cut -d: -f2"
					"""
					env.currentTag = sh(script: cmd, returnStdout: true).trim()
					echo "Tag actual: ${env.currentTag}"
				}
			}
		}
        stage('Buscar tag previo en el registry') {
			steps {
				script {
					def currentTag = env.currentTag ?: 'latest'
					sh '''
						doctl registry repository list-tags $IMAGE_NAME --output json | jq -r '.[].tag' > tags.txt
					'''
					def tags = readFile('tags.txt').split('\n')
					def prevTag = null
					for (int i = 0; i < tags.size(); i++) {
						if (tags[i] == currentTag && i+1 < tags.size()) {
							prevTag = tags[i+1]
							break
						}
					}
					if (!prevTag) {
						error("No se encontrÃ³ un tag previo para rollback.")
					}
					env.PREV_TAG = prevTag
					echo "Tag previo: ${env.PREV_TAG}"
				}
			}
		}
		stage('Rollback en el droplet') {
			steps {
				script {
					sh """
					ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@$env.DROPLET_HOST '
						docker stop $CONTAINER_NAME || true
						docker rm $CONTAINER_NAME || true
						docker pull $REGISTRY/$IMAGE_NAME:${env.PREV_TAG}
						docker run -d --name laravel-app -p 80:8080 \
                          -e APP_ENV=production \
                          -e APP_KEY=${env.APP_KEY} \
                          -e BUILD_SHA=${env.GIT_SHA} -e CREATED_AT=\"\$(date -u +%Y-%m-%dT%H:%M:%SZ)\" \
                          --restart unless-stopped \
                          ${env.REGISTRY}/${env.IMAGE_NAME}:${env.GIT_SHA}
					'
					"""
				}
			}
		}
    }
}
