pipeline {
    agent any
    parameters {
        string(name: 'TARGET_SHA', defaultValue: 'latest', description: 'SHA/tag de la imagen a desplegar')
    }
    environment {
        REGISTRY = "registry.digitalocean.com/tierone"
        CONTAINER_NAME = "laravel-app"
        IMAGE_NAME = "laravel-prod"
        SSH_USER = "root"
        REGISTRY_CREDS = credentials('DO-token')
        SSH_KEY = credentials('do-ssh-key')
        APP_KEY = credentials('APP_KEY')
    }
    stages {
        stage('Login doctl') {
            steps {
                sh 'doctl auth init -t $REGISTRY_CREDS_PSW'
            }
        }
		stage('Get Droplet IP') {
			steps {
				script {
					env.DROPLET_HOST = sh(
						script: "doctl compute droplet list laravel-deploy --format PublicIPv4 --no-header",
						returnStdout: true
					).trim()
					echo "Droplet IP: ${env.DROPLET_HOST}"
				}
			}
		}
        stage('Verificar SHA en registry') {
            steps {
                script {
                    if (!params.TARGET_SHA) {
                        error("Debe proveer un TARGET_SHA como parámetro del build")
                    }
                    // Listar tags en el registry y verificar que exista el SHA
                    sh """
                        doctl registry repository list-tags $IMAGE_NAME --output json | jq -r '.[].tag' > tags.txt
                    """
                    def tags = readFile('tags.txt').split('\n')
                    if (!tags.contains(params.TARGET_SHA)) {
                        error("El SHA/tag '${params.TARGET_SHA}' no existe en el registry")
                    }
                    env.DEPLOY_TAG = params.TARGET_SHA
                    echo "SHA válido: ${env.DEPLOY_TAG}"
                }
            }
        }

        stage('Desplegar container con SHA') {
            steps {
                script {
                    def tag = env.DEPLOY_TAG
                    sh """
                    ssh -i $SSH_KEY -o StrictHostKeyChecking=no $SSH_USER@$env.DROPLET_HOST '
                        echo "Deteniendo container actual..."
                        docker stop $CONTAINER_NAME || true
                        docker rm $CONTAINER_NAME || true
                        echo "Extrayendo imagen $REGISTRY/$IMAGE_NAME:$tag..."
                        docker pull $REGISTRY/$IMAGE_NAME:$tag
                        echo "Corriendo nueva versión..."
                        docker run -d --name laravel-app -p 80:8080 \
                          -e APP_ENV=production \
                          -e APP_KEY=${env.APP_KEY} \
                          -e BUILD_SHA=$tag -e CREATED_AT=\"\$(date -u +%Y-%m-%dT%H:%M:%SZ)\" \
                          --restart unless-stopped \
                          $REGISTRY/$IMAGE_NAME:$tag
                        docker run -d --name $CONTAINER_NAME -p 80:8080 --restart unless-stopped $REGISTRY/$IMAGE_NAME:$tag
                    '
                    """
                }
            }
        }
    }
}
